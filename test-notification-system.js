/**
 * Script test h·ªá th·ªëng notification
 * 
 * Test c√°c ch·ª©c nƒÉng:
 * 1. T·∫°o notification cho user
 * 2. L·∫•y danh s√°ch notifications
 * 3. ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc
 * 4. X√≥a notification
 * 5. ƒê√°nh d·∫•u t·∫•t c·∫£ ƒë√£ ƒë·ªçc
 */

const BASE_URL = 'http://localhost:3000'

// Test user credentials
const TEST_USER = {
  email: 'test@example.com',
  password: 'Test123'
}

let authHeaders = {}

// Helper function ƒë·ªÉ log k·∫øt qu·∫£
function logResult(testName, passed, details = '') {
  const icon = passed ? '‚úÖ' : '‚ùå'
  console.log(`${icon} ${testName}`)
  if (details) console.log(`   ${details}`)
  console.log('')
}

// Helper function ƒë·ªÉ login
async function login() {
  console.log('üîê ƒêang login...\n')
  
  try {
    const response = await fetch(`${BASE_URL}/api/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(TEST_USER)
    })

    const data = await response.json()

    if (data.success && data.user) {
      authHeaders = {
        'Content-Type': 'application/json',
        'x-user-id': data.user.id.toString()
      }
      logResult('Login th√†nh c√¥ng', true, `User: ${data.user.name} (ID: ${data.user.id})`)
      return data.user
    } else {
      logResult('Login th·∫•t b·∫°i', false, data.error || 'Unknown error')
      process.exit(1)
    }
  } catch (error) {
    logResult('Login l·ªói', false, error.message)
    process.exit(1)
  }
}

// Test 1: T·∫°o notification
async function testCreateNotification(userId) {
  console.log('üìù Test 1: T·∫°o notification\n')

  try {
    const notificationData = {
      userId: userId,
      title: 'Test Notification',
      message: 'ƒê√¢y l√† notification test ƒë∆∞·ª£c t·∫°o b·ªüi script',
      type: 'SYSTEM',
      data: {
        testId: Date.now(),
        source: 'test-script'
      }
    }

    const response = await fetch(`${BASE_URL}/api/notifications`, {
      method: 'POST',
      headers: authHeaders,
      body: JSON.stringify(notificationData)
    })

    const data = await response.json()

    if (data.success && data.data) {
      logResult(
        'T·∫°o notification th√†nh c√¥ng',
        true,
        `ID: ${data.data.id}, Title: ${data.data.title}`
      )
      return data.data.id
    } else {
      logResult('T·∫°o notification th·∫•t b·∫°i', false, data.error)
      return null
    }
  } catch (error) {
    logResult('T·∫°o notification l·ªói', false, error.message)
    return null
  }
}

// Test 2: L·∫•y danh s√°ch notifications
async function testGetNotifications() {
  console.log('üìã Test 2: L·∫•y danh s√°ch notifications\n')

  try {
    const response = await fetch(`${BASE_URL}/api/notifications?limit=10`, {
      headers: authHeaders
    })

    const data = await response.json()

    if (data.success && data.data) {
      const { notifications, unreadCount } = data.data
      logResult(
        'L·∫•y danh s√°ch notifications th√†nh c√¥ng',
        true,
        `T·ªïng: ${notifications.length} notifications, Ch∆∞a ƒë·ªçc: ${unreadCount}`
      )
      
      // Hi·ªÉn th·ªã 3 notifications ƒë·∫ßu ti√™n
      if (notifications.length > 0) {
        console.log('   üìå Notifications g·∫ßn nh·∫•t:')
        notifications.slice(0, 3).forEach((notif, index) => {
          const status = notif.isRead ? '‚úì' : '‚óã'
          console.log(`   ${index + 1}. [${status}] ${notif.title}`)
          console.log(`      ${notif.message.substring(0, 60)}...`)
        })
        console.log('')
      }
      
      return notifications
    } else {
      logResult('L·∫•y danh s√°ch th·∫•t b·∫°i', false, data.error)
      return []
    }
  } catch (error) {
    logResult('L·∫•y danh s√°ch l·ªói', false, error.message)
    return []
  }
}

// Test 3: ƒê√°nh d·∫•u notification ƒë√£ ƒë·ªçc
async function testMarkAsRead(notificationId) {
  console.log('‚úì Test 3: ƒê√°nh d·∫•u notification ƒë√£ ƒë·ªçc\n')

  if (!notificationId) {
    logResult('Kh√¥ng c√≥ notification ƒë·ªÉ test', false)
    return false
  }

  try {
    const response = await fetch(`${BASE_URL}/api/notifications/${notificationId}`, {
      method: 'PUT',
      headers: authHeaders
    })

    const data = await response.json()

    if (data.success) {
      logResult(
        'ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc th√†nh c√¥ng',
        true,
        `Notification ID: ${notificationId}`
      )
      return true
    } else {
      logResult('ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc th·∫•t b·∫°i', false, data.error)
      return false
    }
  } catch (error) {
    logResult('ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc l·ªói', false, error.message)
    return false
  }
}

// Test 4: ƒê√°nh d·∫•u t·∫•t c·∫£ ƒë√£ ƒë·ªçc
async function testMarkAllAsRead() {
  console.log('‚úì‚úì Test 4: ƒê√°nh d·∫•u t·∫•t c·∫£ ƒë√£ ƒë·ªçc\n')

  try {
    const response = await fetch(`${BASE_URL}/api/notifications/mark-all-read`, {
      method: 'PUT',
      headers: authHeaders
    })

    const data = await response.json()

    if (data.success) {
      logResult('ƒê√°nh d·∫•u t·∫•t c·∫£ ƒë√£ ƒë·ªçc th√†nh c√¥ng', true)
      return true
    } else {
      logResult('ƒê√°nh d·∫•u t·∫•t c·∫£ ƒë√£ ƒë·ªçc th·∫•t b·∫°i', false, data.error)
      return false
    }
  } catch (error) {
    logResult('ƒê√°nh d·∫•u t·∫•t c·∫£ ƒë√£ ƒë·ªçc l·ªói', false, error.message)
    return false
  }
}

// Test 5: X√≥a notification
async function testDeleteNotification(notificationId) {
  console.log('üóëÔ∏è  Test 5: X√≥a notification\n')

  if (!notificationId) {
    logResult('Kh√¥ng c√≥ notification ƒë·ªÉ x√≥a', false)
    return false
  }

  try {
    const response = await fetch(`${BASE_URL}/api/notifications/${notificationId}`, {
      method: 'DELETE',
      headers: authHeaders
    })

    const data = await response.json()

    if (data.success) {
      logResult(
        'X√≥a notification th√†nh c√¥ng',
        true,
        `Notification ID: ${notificationId}`
      )
      return true
    } else {
      logResult('X√≥a notification th·∫•t b·∫°i', false, data.error)
      return false
    }
  } catch (error) {
    logResult('X√≥a notification l·ªói', false, error.message)
    return false
  }
}

// Test 6: T·∫°o notification c·∫≠p nh·∫≠t ƒë∆°n h√†ng
async function testOrderNotification(userId) {
  console.log('üì¶ Test 6: T·∫°o notification c·∫≠p nh·∫≠t ƒë∆°n h√†ng\n')

  try {
    // Gi·∫£ l·∫≠p vi·ªác t·∫°o notification cho order
    const orderNotification = {
      userId: userId,
      title: 'üöö ƒêang giao h√†ng',
      message: 'ƒê∆°n h√†ng #MP123456789 ƒëang ƒë∆∞·ª£c giao ƒë·∫øn b·∫°n. Vui l√≤ng ch√∫ √Ω ƒëi·ªán tho·∫°i ƒë·ªÉ nh·∫≠n h√†ng.',
      type: 'ORDER',
      data: {
        orderId: 123,
        orderNumber: 'MP123456789',
        oldStatus: 'PENDING',
        newStatus: 'SHIPPING',
        updatedAt: new Date().toISOString()
      }
    }

    const response = await fetch(`${BASE_URL}/api/notifications`, {
      method: 'POST',
      headers: authHeaders,
      body: JSON.stringify(orderNotification)
    })

    const data = await response.json()

    if (data.success) {
      logResult(
        'T·∫°o notification ƒë∆°n h√†ng th√†nh c√¥ng',
        true,
        `Order #${orderNotification.data.orderNumber}`
      )
      return data.data.id
    } else {
      logResult('T·∫°o notification ƒë∆°n h√†ng th·∫•t b·∫°i', false, data.error)
      return null
    }
  } catch (error) {
    logResult('T·∫°o notification ƒë∆°n h√†ng l·ªói', false, error.message)
    return null
  }
}

// Test 7: Ki·ªÉm tra filter by type
async function testFilterByType() {
  console.log('üîç Test 7: Filter notifications theo type\n')

  try {
    const types = ['ORDER', 'PROMOTION', 'SYSTEM', 'LOYALTY']
    const results = []

    for (const type of types) {
      const response = await fetch(`${BASE_URL}/api/notifications?type=${type}&limit=5`, {
        headers: authHeaders
      })

      const data = await response.json()

      if (data.success) {
        results.push({ type, count: data.data.notifications.length })
      }
    }

    logResult('Filter theo type th√†nh c√¥ng', true)
    results.forEach(({ type, count }) => {
      console.log(`   ${type}: ${count} notifications`)
    })
    console.log('')

    return true
  } catch (error) {
    logResult('Filter theo type l·ªói', false, error.message)
    return false
  }
}

// Test 8: Ki·ªÉm tra unread only filter
async function testUnreadOnly() {
  console.log('üì≠ Test 8: L·∫•y ch·ªâ notifications ch∆∞a ƒë·ªçc\n')

  try {
    const response = await fetch(`${BASE_URL}/api/notifications?unreadOnly=true`, {
      headers: authHeaders
    })

    const data = await response.json()

    if (data.success) {
      const { notifications, unreadCount } = data.data
      logResult(
        'L·∫•y notifications ch∆∞a ƒë·ªçc th√†nh c√¥ng',
        true,
        `C√≥ ${unreadCount} notifications ch∆∞a ƒë·ªçc`
      )
      return true
    } else {
      logResult('L·∫•y notifications ch∆∞a ƒë·ªçc th·∫•t b·∫°i', false, data.error)
      return false
    }
  } catch (error) {
    logResult('L·∫•y notifications ch∆∞a ƒë·ªçc l·ªói', false, error.message)
    return false
  }
}

// Main test runner
async function runTests() {
  console.log('\n========================================')
  console.log('üß™ TEST H·ªÜ TH·ªêNG NOTIFICATION')
  console.log('========================================\n')

  try {
    // Login tr∆∞·ªõc
    const user = await login()

    // Test 1: T·∫°o notification
    const notificationId = await testCreateNotification(user.id)

    // Test 2: L·∫•y danh s√°ch
    const notifications = await testGetNotifications()

    // Test 3: ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc
    if (notificationId) {
      await testMarkAsRead(notificationId)
    }

    // Test 4: T·∫°o notification ƒë∆°n h√†ng
    const orderNotificationId = await testOrderNotification(user.id)

    // Test 5: Filter by type
    await testFilterByType()

    // Test 6: Unread only
    await testUnreadOnly()

    // Test 7: ƒê√°nh d·∫•u t·∫•t c·∫£ ƒë√£ ƒë·ªçc
    await testMarkAllAsRead()

    // Test 8: X√≥a notification
    if (orderNotificationId) {
      await testDeleteNotification(orderNotificationId)
    }

    // L·∫•y danh s√°ch sau khi test
    console.log('üìä Ki·ªÉm tra l·∫°i sau khi test:\n')
    await testGetNotifications()

    console.log('========================================')
    console.log('‚úÖ HO√ÄN TH√ÄNH T·∫§T C·∫¢ TESTS')
    console.log('========================================\n')

  } catch (error) {
    console.error('\n‚ùå L·ªói khi ch·∫°y tests:', error.message)
    process.exit(1)
  }
}

// Ch·∫°y tests
runTests()

