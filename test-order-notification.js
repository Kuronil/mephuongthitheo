/**
 * Script test notification khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
 * 
 * Flow:
 * 1. Login admin
 * 2. L·∫•y m·ªôt ƒë∆°n h√†ng c√≥ userId
 * 3. C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
 * 4. Login user
 * 5. Ki·ªÉm tra notification m·ªõi
 */

const BASE_URL = 'http://localhost:3000'

// Admin credentials
const ADMIN_USER = {
  email: 'admin@mephuong.com',
  password: 'Admin123'
}

// Test user credentials
const TEST_USER = {
  email: 'test@example.com',
  password: 'Test123'
}

let adminHeaders = {}
let userHeaders = {}

// Helper function ƒë·ªÉ log k·∫øt qu·∫£
function logResult(testName, passed, details = '') {
  const icon = passed ? '‚úÖ' : '‚ùå'
  console.log(`${icon} ${testName}`)
  if (details) console.log(`   ${details}`)
  console.log('')
}

// Login admin
async function loginAdmin() {
  console.log('üîê ƒêang login admin...\n')
  
  try {
    const response = await fetch(`${BASE_URL}/api/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(ADMIN_USER)
    })

    const data = await response.json()

    if (data.success && data.user && data.user.isAdmin) {
      adminHeaders = {
        'Content-Type': 'application/json',
        'x-user-id': data.user.id.toString()
      }
      logResult('Login admin th√†nh c√¥ng', true, `Admin: ${data.user.name}`)
      return data.user
    } else {
      logResult('Login admin th·∫•t b·∫°i', false, data.error || 'User is not admin')
      process.exit(1)
    }
  } catch (error) {
    logResult('Login admin l·ªói', false, error.message)
    process.exit(1)
  }
}

// Login user
async function loginUser() {
  console.log('üîê ƒêang login user...\n')
  
  try {
    const response = await fetch(`${BASE_URL}/api/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(TEST_USER)
    })

    const data = await response.json()

    if (data.success && data.user) {
      userHeaders = {
        'Content-Type': 'application/json',
        'x-user-id': data.user.id.toString()
      }
      logResult('Login user th√†nh c√¥ng', true, `User: ${data.user.name} (ID: ${data.user.id})`)
      return data.user
    } else {
      logResult('Login user th·∫•t b·∫°i', false, data.error || 'Unknown error')
      process.exit(1)
    }
  } catch (error) {
    logResult('Login user l·ªói', false, error.message)
    process.exit(1)
  }
}

// L·∫•y danh s√°ch orders
async function getOrders() {
  console.log('üì¶ ƒêang l·∫•y danh s√°ch orders...\n')
  
  try {
    const response = await fetch(`${BASE_URL}/api/admin/orders?limit=10`, {
      headers: adminHeaders
    })

    const data = await response.json()

    if (data.success && data.data && data.data.orders) {
      const orders = data.data.orders
      logResult(
        'L·∫•y orders th√†nh c√¥ng',
        true,
        `T√¨m th·∫•y ${orders.length} orders`
      )
      
      // Hi·ªÉn th·ªã m·ªôt v√†i orders
      console.log('   üìã Orders g·∫ßn nh·∫•t:')
      orders.slice(0, 5).forEach((order, index) => {
        const userInfo = order.userId ? `User ID: ${order.userId}` : 'Guest'
        console.log(`   ${index + 1}. #${order.orderNumber || order.id} - ${order.status} (${userInfo})`)
      })
      console.log('')
      
      return orders
    } else {
      logResult('L·∫•y orders th·∫•t b·∫°i', false, data.error)
      return []
    }
  } catch (error) {
    logResult('L·∫•y orders l·ªói', false, error.message)
    return []
  }
}

// C·∫≠p nh·∫≠t tr·∫°ng th√°i order
async function updateOrderStatus(orderId, newStatus) {
  console.log(`üîÑ ƒêang c·∫≠p nh·∫≠t tr·∫°ng th√°i order #${orderId} th√†nh ${newStatus}...\n`)
  
  try {
    const response = await fetch(`${BASE_URL}/api/admin/orders`, {
      method: 'PUT',
      headers: adminHeaders,
      body: JSON.stringify({
        orderId: orderId,
        status: newStatus
      })
    })

    const data = await response.json()

    if (data.success) {
      logResult(
        'C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng',
        true,
        `Order #${orderId} ‚Üí ${newStatus}`
      )
      return true
    } else {
      logResult('C·∫≠p nh·∫≠t tr·∫°ng th√°i th·∫•t b·∫°i', false, data.error)
      return false
    }
  } catch (error) {
    logResult('C·∫≠p nh·∫≠t tr·∫°ng th√°i l·ªói', false, error.message)
    return false
  }
}

// L·∫•y notifications c·ªßa user
async function getUserNotifications() {
  console.log('üîî ƒêang l·∫•y notifications c·ªßa user...\n')
  
  try {
    const response = await fetch(`${BASE_URL}/api/notifications?limit=10`, {
      headers: userHeaders
    })

    const data = await response.json()

    if (data.success && data.data) {
      const { notifications, unreadCount } = data.data
      logResult(
        'L·∫•y notifications th√†nh c√¥ng',
        true,
        `T·ªïng: ${notifications.length} notifications, Ch∆∞a ƒë·ªçc: ${unreadCount}`
      )
      
      // Hi·ªÉn th·ªã notifications
      if (notifications.length > 0) {
        console.log('   üîî Notifications:')
        notifications.forEach((notif, index) => {
          const status = notif.isRead ? '‚úì' : 'üî¥'
          const time = new Date(notif.createdAt).toLocaleString('vi-VN')
          console.log(`   ${index + 1}. [${status}] ${notif.title}`)
          console.log(`      ${notif.message}`)
          console.log(`      Type: ${notif.type} | Time: ${time}`)
          if (notif.data) {
            const data = typeof notif.data === 'string' ? JSON.parse(notif.data) : notif.data
            if (data.orderNumber) {
              console.log(`      Order: ${data.orderNumber} (${data.oldStatus} ‚Üí ${data.newStatus})`)
            }
          }
          console.log('')
        })
      }
      
      return notifications
    } else {
      logResult('L·∫•y notifications th·∫•t b·∫°i', false, data.error)
      return []
    }
  } catch (error) {
    logResult('L·∫•y notifications l·ªói', false, error.message)
    return []
  }
}

// T·∫°o test order cho user
async function createTestOrder(userId) {
  console.log('üìù ƒêang t·∫°o test order...\n')
  
  try {
    // T·∫°o order tr·ª±c ti·∫øp v√†o database th√¥ng qua API
    const orderData = {
      items: [
        {
          id: 1,
          name: 'Test Product',
          price: 100000,
          quantity: 2
        }
      ],
      total: 200000,
      name: 'Test User',
      phone: '0123456789',
      address: 'Test Address',
      note: 'Test order for notification',
      paymentMethod: 'COD'
    }

    const response = await fetch(`${BASE_URL}/api/orders`, {
      method: 'POST',
      headers: userHeaders,
      body: JSON.stringify(orderData)
    })

    const data = await response.json()

    if (data.success && data.order) {
      logResult(
        'T·∫°o test order th√†nh c√¥ng',
        true,
        `Order ID: ${data.order.id}, Number: ${data.order.orderNumber}`
      )
      return data.order
    } else {
      logResult('T·∫°o test order th·∫•t b·∫°i', false, data.error)
      return null
    }
  } catch (error) {
    logResult('T·∫°o test order l·ªói', false, error.message)
    return null
  }
}

// Main test flow
async function runTest() {
  console.log('\n========================================')
  console.log('üß™ TEST ORDER NOTIFICATION SYSTEM')
  console.log('========================================\n')

  try {
    // Step 1: Login admin
    await loginAdmin()

    // Step 2: Login user
    const user = await loginUser()

    // Step 3: T·∫°o test order
    const testOrder = await createTestOrder(user.id)
    
    if (!testOrder) {
      console.log('‚ùå Kh√¥ng th·ªÉ t·∫°o test order, s·∫Ω d√πng order c√≥ s·∫µn\n')
    } else {
      // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ notification ƒë∆∞·ª£c t·∫°o
      console.log('‚è≥ ƒê·ª£i 2 gi√¢y ƒë·ªÉ notification ƒë∆∞·ª£c t·∫°o...\n')
      await new Promise(resolve => setTimeout(resolve, 2000))
      
      // Ki·ªÉm tra notification t·∫°o order
      console.log('üìå Ki·ªÉm tra notification "ƒê·∫∑t h√†ng th√†nh c√¥ng":\n')
      await getUserNotifications()
    }

    // Step 4: L·∫•y danh s√°ch orders
    const orders = await getOrders()

    // T√¨m order c√≥ userId ƒë·ªÉ test
    const orderWithUser = orders.find(o => o.userId) || testOrder
    
    if (!orderWithUser) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y order n√†o c√≥ userId ƒë·ªÉ test\n')
      console.log('üí° Vui l√≤ng t·∫°o order v·ªõi user account tr∆∞·ªõc khi ch·∫°y test n√†y\n')
      return
    }

    console.log(`‚ú® S·∫Ω test v·ªõi order #${orderWithUser.orderNumber || orderWithUser.id}\n`)

    // Step 5: Test c√°c tr·∫°ng th√°i kh√°c nhau
    const statusesToTest = [
      { status: 'SHIPPING', waitTime: 2000 },
      { status: 'DELIVERED', waitTime: 2000 },
      { status: 'COMPLETED', waitTime: 2000 }
    ]

    for (const { status, waitTime } of statusesToTest) {
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i
      await updateOrderStatus(orderWithUser.id, status)
      
      // ƒê·ª£i notification ƒë∆∞·ª£c t·∫°o
      console.log(`‚è≥ ƒê·ª£i ${waitTime/1000} gi√¢y ƒë·ªÉ notification ƒë∆∞·ª£c t·∫°o...\n`)
      await new Promise(resolve => setTimeout(resolve, waitTime))
      
      // Ki·ªÉm tra notification
      console.log(`üìå Ki·ªÉm tra notification cho status ${status}:\n`)
      const notifications = await getUserNotifications()
      
      // Ki·ªÉm tra xem c√≥ notification m·ªõi kh√¥ng
      const latestNotif = notifications[0]
      if (latestNotif && latestNotif.type === 'ORDER') {
        const notifData = typeof latestNotif.data === 'string' 
          ? JSON.parse(latestNotif.data) 
          : latestNotif.data
        
        if (notifData.newStatus === status) {
          console.log('   ‚úÖ Notification m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o ƒë√∫ng!\n')
        } else {
          console.log('   ‚ö†Ô∏è Notification kh√¥ng kh·ªõp v·ªõi status m·ªõi\n')
        }
      } else {
        console.log('   ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y notification ORDER m·ªõi\n')
      }
      
      console.log('---\n')
    }

    console.log('========================================')
    console.log('‚úÖ HO√ÄN TH√ÄNH TEST')
    console.log('========================================\n')
    
    console.log('üìä T√≥m t·∫Øt:')
    console.log(`   ‚Ä¢ ƒê√£ test ${statusesToTest.length} tr·∫°ng th√°i`)
    console.log('   ‚Ä¢ M·ªói l·∫ßn c·∫≠p nh·∫≠t t·∫°o 1 notification')
    console.log('   ‚Ä¢ User nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o real-time')
    console.log('')

  } catch (error) {
    console.error('\n‚ùå L·ªói khi ch·∫°y test:', error.message)
    process.exit(1)
  }
}

// Ch·∫°y test
runTest()

